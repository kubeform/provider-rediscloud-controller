/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	"unsafe"

	jsoniter "github.com/json-iterator/go"
	"github.com/modern-go/reflect2"
)

func GetEncoder() map[string]jsoniter.ValEncoder {
	return map[string]jsoniter.ValEncoder{
		jsoniter.MustGetKind(reflect2.TypeOf(SubscriptionSpecAllowlist{}).Type1()):      SubscriptionSpecAllowlistCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(SubscriptionSpecCloudProvider{}).Type1()):  SubscriptionSpecCloudProviderCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(SubscriptionSpecDatabaseModule{}).Type1()): SubscriptionSpecDatabaseModuleCodec{},
	}
}

func GetDecoder() map[string]jsoniter.ValDecoder {
	return map[string]jsoniter.ValDecoder{
		jsoniter.MustGetKind(reflect2.TypeOf(SubscriptionSpecAllowlist{}).Type1()):      SubscriptionSpecAllowlistCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(SubscriptionSpecCloudProvider{}).Type1()):  SubscriptionSpecCloudProviderCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(SubscriptionSpecDatabaseModule{}).Type1()): SubscriptionSpecDatabaseModuleCodec{},
	}
}

func getEncodersWithout(typ string) map[string]jsoniter.ValEncoder {
	origMap := GetEncoder()
	delete(origMap, typ)
	return origMap
}

func getDecodersWithout(typ string) map[string]jsoniter.ValDecoder {
	origMap := GetDecoder()
	delete(origMap, typ)
	return origMap
}

// +k8s:deepcopy-gen=false
type SubscriptionSpecAllowlistCodec struct {
}

func (SubscriptionSpecAllowlistCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*SubscriptionSpecAllowlist)(ptr) == nil
}

func (SubscriptionSpecAllowlistCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*SubscriptionSpecAllowlist)(ptr)
	var objs []SubscriptionSpecAllowlist
	if obj != nil {
		objs = []SubscriptionSpecAllowlist{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(SubscriptionSpecAllowlist{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (SubscriptionSpecAllowlistCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*SubscriptionSpecAllowlist)(ptr) = SubscriptionSpecAllowlist{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []SubscriptionSpecAllowlist

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(SubscriptionSpecAllowlist{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*SubscriptionSpecAllowlist)(ptr) = objs[0]
			} else {
				*(*SubscriptionSpecAllowlist)(ptr) = SubscriptionSpecAllowlist{}
			}
		} else {
			*(*SubscriptionSpecAllowlist)(ptr) = SubscriptionSpecAllowlist{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj SubscriptionSpecAllowlist

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(SubscriptionSpecAllowlist{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*SubscriptionSpecAllowlist)(ptr) = obj
		} else {
			*(*SubscriptionSpecAllowlist)(ptr) = SubscriptionSpecAllowlist{}
		}
	default:
		iter.ReportError("decode SubscriptionSpecAllowlist", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type SubscriptionSpecCloudProviderCodec struct {
}

func (SubscriptionSpecCloudProviderCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*SubscriptionSpecCloudProvider)(ptr) == nil
}

func (SubscriptionSpecCloudProviderCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*SubscriptionSpecCloudProvider)(ptr)
	var objs []SubscriptionSpecCloudProvider
	if obj != nil {
		objs = []SubscriptionSpecCloudProvider{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(SubscriptionSpecCloudProvider{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (SubscriptionSpecCloudProviderCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*SubscriptionSpecCloudProvider)(ptr) = SubscriptionSpecCloudProvider{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []SubscriptionSpecCloudProvider

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(SubscriptionSpecCloudProvider{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*SubscriptionSpecCloudProvider)(ptr) = objs[0]
			} else {
				*(*SubscriptionSpecCloudProvider)(ptr) = SubscriptionSpecCloudProvider{}
			}
		} else {
			*(*SubscriptionSpecCloudProvider)(ptr) = SubscriptionSpecCloudProvider{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj SubscriptionSpecCloudProvider

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(SubscriptionSpecCloudProvider{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*SubscriptionSpecCloudProvider)(ptr) = obj
		} else {
			*(*SubscriptionSpecCloudProvider)(ptr) = SubscriptionSpecCloudProvider{}
		}
	default:
		iter.ReportError("decode SubscriptionSpecCloudProvider", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type SubscriptionSpecDatabaseModuleCodec struct {
}

func (SubscriptionSpecDatabaseModuleCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*SubscriptionSpecDatabaseModule)(ptr) == nil
}

func (SubscriptionSpecDatabaseModuleCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*SubscriptionSpecDatabaseModule)(ptr)
	var objs []SubscriptionSpecDatabaseModule
	if obj != nil {
		objs = []SubscriptionSpecDatabaseModule{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(SubscriptionSpecDatabaseModule{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (SubscriptionSpecDatabaseModuleCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*SubscriptionSpecDatabaseModule)(ptr) = SubscriptionSpecDatabaseModule{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []SubscriptionSpecDatabaseModule

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(SubscriptionSpecDatabaseModule{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*SubscriptionSpecDatabaseModule)(ptr) = objs[0]
			} else {
				*(*SubscriptionSpecDatabaseModule)(ptr) = SubscriptionSpecDatabaseModule{}
			}
		} else {
			*(*SubscriptionSpecDatabaseModule)(ptr) = SubscriptionSpecDatabaseModule{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj SubscriptionSpecDatabaseModule

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(SubscriptionSpecDatabaseModule{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*SubscriptionSpecDatabaseModule)(ptr) = obj
		} else {
			*(*SubscriptionSpecDatabaseModule)(ptr) = SubscriptionSpecDatabaseModule{}
		}
	default:
		iter.ReportError("decode SubscriptionSpecDatabaseModule", "unexpected JSON type")
	}
}
